1.//pattern program
public class Main
{
	public static void main(String[] args) {
	    int size=5;
	    for(int i=5;i>0;i--){
	        for(int j=0;j<i;j++){
	            System.out.print("*");
	        }
	        System.out.println();
	    }
	    for(int i=2;i<=5;i++){
	        for(int j=0;j<=i;j++){
	            System.out.print("*");
	        }
	        System.out.println();
	    }
	}
}
2.//Prime in the range
class Main{
    public static void main (String[] args) {
        int i,j;
        int n=5;
        for(i=1;i<=n;i++){
            int count=0;
            for(j=1;j<=i;j++){
                if(i%j==0){
                    count++;
                }
            }
            if(count==2){
                System.out.println("Prime number in the range "+i);
        }
          
        }
            
    }
}
3.//Find prime or not
import java.util.Scanner;
class Main{
    public static void main (String[] args) {
       int x;
       Scanner scan =new Scanner(System.in);
       System.out.println("Enter the number to find prime or not");
       x=scan.nextInt();
       int count=0;
       if(x>1){
           for(int i=1;i<=x;i++){
               if(x%i==0){
                   count++;
               }
           }
           if(count==2){
               System.out.println("It is a prime number:"+x);
           }
           else{
               System.out.println("It is not  prime number:"+x);
           }
           
       }
       else{
           System.out.println("It is not a prime number:"+x);
       }
    }
}
4.//Even or Odd
import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter a number: ");
        int n = sc.nextInt();
        if(n%2!=0)
        {
            System.out.println("Weird");
        }
        if(n%2==0)
        {
            if(n>=2 && n<=5)
            {
                System.out.println("Not Weird");
            }
            else if(n>=6 && n<=20)
            {
                System.out.println("Weird");
            }
            else if(n>20)
            {
                System.out.println("Not Weird");
            }
        }
    }
}
5.//All numbers in NumberLand are standing in a circle for a dancing ceremony. Every number
needs a dancing partner. Dancing partner of any number is the number which is standing
radially opposite to it in the circle. The numbers are from 0 to N-1. A certain number X
wants to know who will be its dancing partner. Please help X.
Input
Two positive integers denoting the value of N and X.
Output
Print the number radially opposite to X in a circle of N numbers.
//
import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt(); // Total number of numbers in the circle
        int x = scanner.nextInt(); // The number for which we need to find the partner

        // Calculate the number radially opposite to X
        int oppositeNumber = (x + n / 2) % n;

        System.out.println(oppositeNumber);
    }
}
6.//Print an integer denoting temperature in Fahrenheit.
Constraints
0<=T<=1000
Sample Input
100
Sample Output
212//
sol:
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int celsius = scanner.nextInt();
        int fahrenheit = (celsius * 9/5) + 32;
         System.out.println(fahrenheit);
       } 
}
7.)Sample Input
2
abcde abc
pqrst pr
Sample Output
Yes
No
sol:
import java.util.Scanner;
public class Substring {
	public static void main(String[] args) {
	Scanner scan=new Scanner(System.in);
	System.out.println("Enter a letters to check Whether it is substring or not:");
	String input =scan.next();
	String subString=scan.next();
	if(input.contains(subString)) {
		System.out.println("Yes");
	}else {
		System.out.println("No");
	}

}
}
8)Input
A single string S.
Output
Print "YES", if the string is a pangram, else print "NO".
Constraints
1 ≤ S.length ≤ 100
Sample Input
QuickWaftingZephyrsVexBoldJim
Sample Output
YES
sol:
import java.util.*;

class Panagram{
	public static void main(String[] args) {
		Scanner scan=new Scanner(System.in);
		String s=scan.nextLine();
		String res=isPangram(s)?"Yes":"No";
		System.out.println(res);
	}
	public static boolean isPangram(String s) {
		Set<Character> letters=new HashSet<>();
		for(char ch:s.toCharArray()) {
			ch=Character.toLowerCase(ch);
			if(Character.isLetter(ch)) {
				letters.add(ch);
			}
		}
		return letters.size()==26;
	}
}
9)Input
Single integer N
Output
Maximum number of groups can be formed
Constraints
1<=N<100000
Sample Input
6
Sample Output
2
sol):
import java.util.Scanner;
public class  Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        // Read the number of students
        int N = scanner.nextInt();
        // Calculate the maximum number of groups
        int maxGroups = (N - 2) / 3 + 1
        // Print the maximum number of groups
        System.out.println(maxGroups);
    }
}
10)Input
A single integer N.
Output
Print the lexicographically smallest string of length N.
Constraints
1 ≤ N ≤ 26
Sample Input
2
Sample Output
ab
import java.util.Scanner;
public class HappyString {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        // Read the length of the string
        int N = scanner.nextInt();
       // Generate and print the lexicographically smallest happy string
        String happyString = generateHappyString(N);
        System.out.println(happyString);
    }
   // Function to generate the lexicographically smallest happy string
    private static String generateHappyString(int N) {
        StringBuilder happyString = new StringBuilder();
        // Start with 'a'
        char currentChar = 'a';
        // Iterate through each position in the string
        for (int i = 0; i < N; i++) {
            // Append the current character to the string
            happyString.append(currentChar);
          // Move to the next character
            currentChar++;
            if(currentChar>'z') {
            	currentChar='a';//break ;//current char will repeat up to the given value
            }
        }
         return happyString.toString();
    }
}
11)Input:
First line contains N and K.
Second line contains N integers denoting the array.
Output:
Print the array after the rotation.
Constraints:
1 <= N, K <= 100000
1 <= Arr[i] <= 10^9
Sample Input:
5 2
1 2 3 4 5
Sample Output:
4 5 1 2 3
sol)
import java.util.Scanner;
public class Main
{
  public static void main (String[]args)
  {
    Scanner scanner = new Scanner (System.in);
    // Input N and K
	int N = scanner.nextInt ();
    int K = scanner.nextInt ();
    // Input array elements
	int[] arr = new int[N];
    for (int i = 0; i < N; i++)
	  {
		arr[i] = scanner.nextInt ();
      }
  // Rotate the array rightwards by K rotations
	rotateArray (arr, K);
 // Print the rotated array
	for (int i = 0; i < N; i++)
	  {
       System.out.print (arr[i] + " ");
      }

	scanner.close ();

  }

  // Function to rotate the array rightwards by K rotations
  private static void rotateArray (int[]arr, int K)
  {

	int N = arr.length;
   // Handle cases where K is greater than array length
	K = K % N;
   // Create a temporary array to store rotated elements
	int[] temp = new int[N];
    // Copy the last K elements to temp
	for (int i = 0; i < K; i++)
	  {

		temp[i] = arr[N - K + i];

	  }
   // Copy the first N-K elements to the end of temp
	for (int i = K; i < N; i++)
	  {

		temp[i] = arr[i - K];

	  }

	// Copy elements of temp back to the original array
	for (int i = 0; i < N; i++)
	  {

		arr[i] = temp[i];

	  }
  }
}








